
--------------------------------------------------------------------------------
--Note Taker
--------------------------------------------------------------------------------

useColor = true
cooperative = false
colorMatch = false
useNames = false
playerNoteTaker = ''
privateFogGUID = nil
privateScreenGUID = nil
swapLF = false
moveTracker = true
prevPresColor = nil
prevChanColor = nil
nextPost = nil
forceMenu = nil
lastGUID = nil
editMode = true -- true is right, false is left
--CUT HERE
model_list = {}
image_list = {}
no_button_list = {}

menu_unicode = '☰'
up_unicode = '▲'
right_unicode = '►'
down_unicode = '▼'
left_unicode = '◄'

noteTakerNotes = {}
noteTakerCurrLine = 0

rightOffset = {White = 0, Brown = 0, Red = 0, Orange = 2.5, Yellow = -2.5, Green = 0, Teal = 0, Blue = 0, Purple = 2.5, Pink = -2.5}
colorOffset = {White = 0, Brown = 0, Red = 0, Orange = 0, Yellow = 0, Green = 5, Teal = 5, Blue = 5, Purple = 5, Pink = 5}
cancelDestroy = false
functionName = nil
sharedHistory = false

-- Defaults (custom board)
positionXscale = 1
positionY = 0.6
positionZscale = 1
positionZoffset1 = 0
positionZoffset2 = 0
rotationZ = 0
giveHeight = 0
giveForward = -19
buttonScale = 1
fontScale = 1
maxLines = 25
textColorReplace = 'FFFFFF]'

-- tracker (default)
electionTrackerOrgPos = {x = -3.970005, y = 1.27525151, z = -9.385001}
electionTrackerMoveX = 2.7

function noteTakerOnLoad(saveString)
	self.setDescription('Note Taker by Lost Savage\nBased on the work of:\nsmiling Aktheon,\nSwiftPanda,\nThe Blind Dragon\nand Max\n')
	if not (saveString == '') then
		local save = JSON.decode(saveString)
		useColor = save['c']
		cooperative = save['co']
		colorMatch = save['m']
		useNames = save['n']
		noteTakerNotes = save['ntn']
		noteTakerCurrLine = save['ntcl']
		playerNoteTaker = save['p']
		privateFogGUID = save['pfg']
		privateScreenGUID = save['psg']
		swapLF = save['s']
		moveTracker = save['t']
	end

	if self.name ~= 'backgammon_board' then
		sharedHistory = true
		Global.call('initNoteTakerValues', {self.name})
		if Global.getVar('noteTakerCurrLine') == 0 then
			Global.call('addNewLine')
		end
	else
		initNoteTakerValues(self.name)
		if noteTakerCurrLine == 0 then
			addNewLine()
		end
		local oldNoteTaker = getObjectFromGUID(lastGUID)
		if oldNoteTaker then
			noteTakerNotes = oldNoteTaker.getTable('noteTakerNotes')
			noteTakerCurrLine = oldNoteTaker.getVar('noteTakerCurrLine')
		end
	end

	if playerNoteTaker and not (playerNoteTaker == '') then
		if forceMenu then
			forceMenu = false
			if sharedHistory then
				Global.call('menu', {self})
			else
				menu(self)
			end
		else
			if sharedHistory then
				Global.call('setupBoard', {self})
			else
				setupBoard(self)
			end
		end
	else
		if sharedHistory then
			Global.call('menu', {self})
		else
			menu(self)
		end
	end
end

function notetakerOnSave()
	local save = {}
	save['c'] = useColor
	save['co'] = cooperative
	save['m'] = colorMatch
	save['n'] = useNames
	save['ntn'] = noteTakerNotes
	save['ntcl'] = noteTakerCurrLine
	save['p'] = playerNoteTaker
	save['pfg'] = privateFogGUID
	save['psg'] = privateScreenGUID
	save['s'] = swapLF
	save['t'] = moveTracker

	local saveString = JSON.encode(save)

	return saveString
end

function notetakerOnDestroy()
	if not cancelDestroy then
		if privateScreenGUID then destroyObjectByGUID(privateScreenGUID) end
		if privateFogGUID then destroyObjectByGUID(privateFogGUID) end
	end
end

function initNoteTakerValues(boardName)
	if type(boardName) == 'table' then
		boardName = boardName[1]
	end

	if boardName == 'Chess_Board' then
		positionXscale = -1
		positionY = -0.9
		rotationZ = 180
	elseif boardName == 'Checker_Board' then
		positionXscale = -1
		positionY = -0.1
		rotationZ = 180
		giveHeight = 1
	elseif boardName == 'Go_Board' then
		positionXscale = -1.1
		positionY = -1.3
		positionZscale = 1.1
		rotationZ = 180
		giveHeight = -1
		buttonScale = 1.1
		fontScale = 1.1
	elseif boardName == 'reversi_board' then
		positionXscale = -1.1
		positionY = -1.5
		positionZscale = 1.1
		rotationZ = 180
		giveHeight = -1
		buttonScale = 1.1
		fontScale = 1.1
	elseif boardName == 'backgammon_board' then
		positionXscale = -0.9
		positionY = -0.1
		positionZscale = 0.9
		positionZoffset1 = 4.5
		positionZoffset2 = 4.2
		rotationZ = 180
		giveHeight = 1
		giveForward = -26
		buttonScale = 0.9
		fontScale = 0.9
		maxLines = 10
		textColorReplace = '000000]'

		noteTakerSetNotes = function(stringIn)
			local out = string.gsub(stringIn, stringColorToHex('White') .. ']', textColorReplace)
			local screen = getObjectFromGUID(privateScreenGUID)
			if screen then
				screen.setDescription(out)
			end
		end
	elseif boardName == 'Custom_Model' then
		positionXscale = 1.5
		positionZscale = 1.5
		buttonScale = 1.5
		fontScale = 1.5
	end

	local options = Global.getTable('options')
	if options.scriptedVoting and boardName.name ~= 'backgammon_board' then
		maxLines = 19
	end
end

function spawnWaitDestructCoroutine()
	local params = {
		type = self.name,
		scale = self.getScale(),
		position = self.getPosition(),
		rotation = self.getRotation(),
		sound = false
	}
	local notetaker = spawnObject(params)
	notetaker.setLuaScript(respawnNoteTakerLuaScript())
	notetaker.setLock(true)
	if params.type == 'Custom_Board' then
		local custom = {}
		if image_list[functionName] then
			custom.image = image_list[functionName]
		elseif image_list['default'] then
			custom.image = image_list['default']
		else
			custom.image = 'http://cloud-3.steamusercontent.com/ugc/486766424829587499/FDF54ECD5D1706DE0A590239E84D62CDE757FE46/'
		end
		notetaker.setCustomObject(custom)
	elseif params.type == 'Custom_Model' then
		local custom = {}
		if image_list[functionName] then
			custom.diffuse = image_list[functionName]
		elseif image_list['default'] then
			custom.diffuse = image_list['default']
		else
			custom.diffuse = 'http://cloud-3.steamusercontent.com/ugc/478894184492866532/6639B6E1AB511AB10D53DB91B2A47A0A63410DDF/'
		end
		if model_list[functionName] then
			custom.mesh = model_list[functionName]
		elseif image_list['default'] then
			custom.mesh = model_list['default']
		else
			custom.mesh = 'http://cloud-3.steamusercontent.com/ugc/478894184492865468/51C18F993BBDD5D1B55FE5261A625B2CE0B2FD9F/'
		end
		custom.type = 4
		custom.material = 3
		notetaker.setCustomObject(custom)
	end
	wait(5)
	cancelDestroy = true
	self.destruct()

	return true
end

function menuButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		clickedObject.setVar('forceMenu', true)
		clickedObject.setVar('functionName', 'menu')
		startLuaCoroutine(clickedObject, 'spawnWaitDestructCoroutine')
	end
end

function menu(selfIn)
	if type(selfIn) == 'table' then
		selfIn = selfIn[1]
	end

	if selfIn.name == 'backgammon_board' then
		local screen = getObjectFromGUID(privateScreenGUID)
		if screen then
			forceObjectToPlayer(screen, selfIn.getVar('playerNoteTaker'), {forward = giveForward + 12.5, right = rightOffset[selfIn.getVar('playerNoteTaker')], up = 0, forceHeight = 0.9}, {x = 0, y = 180 - rotationZ, z = 0})
			screen.setLock(true)
			startLuaCoroutine(selfIn, 'spawnFogCoroutine')
		else
			if selfIn.getVar('playerNoteTaker') ~= '' then
				forceMenu = true
				spawnScreen(selfIn)
				return
			end
		end
	end
	if no_button_list['menu'] then
		positionY = -0.1
	end

	local buttonParam = {rotation = {0, 0, rotationZ}, font_size = 300 * fontScale}
	if sharedHistory then
		buttonParam.function_owner = Global
	else
		buttonParam.function_owner = self
	end

	selfIn.clearButtons()

	local fakePlayerNoteTaker = false
	if selfIn.getVar('playerNoteTaker') == '' then
		fakePlayerNoteTaker = true
		selfIn.setVar('playerNoteTaker', 'White')
	end

	-- Who is the note taker?
	if selfIn.name == 'backgammon_board' then
		local screen = getObjectFromGUID(privateScreenGUID)
		if screen then
			screen.setDescription('\n\n\n\n\n\n\n\n\n                      Who is the note taker?')
		end
	else
		buttonParam.click_function = 'nullFunction'
		buttonParam.label = 'Who is the note taker?'
		buttonParam.position = {positionXscale * 0, positionY, (-8.3 * positionZscale) + positionZoffset1}
		buttonParam.height = 500 * buttonScale
		buttonParam.width = 3500 * buttonScale
		selfIn.createButton(buttonParam)
	end

	-- Player Options
	buttonParam.height = 700 * buttonScale
	buttonParam.width = 1800 * buttonScale
	if not cooperative or Player[selfIn.getVar('playerNoteTaker')].admin then
		buttonParam.click_function = 'setupWhite'
		buttonParam.label = 'White'
		buttonParam.position = {positionXscale * 4, positionY, (-2.25 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('White')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupBrown'
		buttonParam.label = 'Brown'
		buttonParam.position = {positionXscale * 0, positionY, (-2.25 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Brown')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupRed'
		buttonParam.label = 'Red'
		buttonParam.position = {positionXscale * -4, positionY, (-2.25 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Red')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupOrange'
		buttonParam.label = 'Orange'
		buttonParam.position = {positionXscale * -6, positionY, (-3.75 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Orange')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupYellow'
		buttonParam.label = 'Yellow'
		buttonParam.position = {positionXscale * -6, positionY, (-5.25 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Yellow')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupGreen'
		buttonParam.label = 'Green'
		buttonParam.position = {positionXscale * -4, positionY, (-6.75 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Green')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupTeal'
		buttonParam.label = 'Teal'
		buttonParam.position = {positionXscale * 0, positionY, (-6.75 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Teal')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupBlue'
		buttonParam.label = 'Blue'
		buttonParam.position = {positionXscale * 4, positionY, (-6.75 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Blue')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupPurple'
		buttonParam.label = 'Purple'
		buttonParam.position = {positionXscale * 6, positionY, (-5.25 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Purple')
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setupPink'
		buttonParam.label = 'Pink'
		buttonParam.position = {positionXscale * 6, positionY, (-3.75 * positionZscale) + positionZoffset1}
		buttonParam.color = stringColorToRGB('Pink')
		selfIn.createButton(buttonParam)
	end

	buttonParam.click_function = 'setupMe'
	buttonParam.label = 'Me'
	buttonParam.position = {positionXscale * 0, positionY, (-4.5 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGB('White')
	selfIn.createButton(buttonParam)

	menuBase(selfIn)

	if fakePlayerNoteTaker then
		selfIn.setVar('playerNoteTaker', '')
	end
end

function menuBase(selfIn)
	local buttonParam = {rotation = {0, 0, rotationZ}, font_size = 300 * fontScale}
	local text = Global.getTable('text')

	if sharedHistory then
		buttonParam.function_owner = Global
	else
		buttonParam.function_owner = self
	end

	buttonParam.click_function = 'flipUseNames'
	if useNames then buttonParam.label = 'x' else buttonParam.label = '' end
	buttonParam.position = {positionXscale * -7.5, positionY, (1.25 * positionZscale) + positionZoffset2}
	buttonParam.width = 300 * buttonScale
	buttonParam.height = 300 * buttonScale
	selfIn.createButton(buttonParam)
	buttonParam.label = 'Use player names'
	buttonParam.position = {positionXscale * -4, positionY, (1.25 * positionZscale) + positionZoffset2}
	buttonParam.width = 2700 * buttonScale
	buttonParam.height = 700 * buttonScale
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'flipUseColor'
	if useColor then buttonParam.label = 'x' else buttonParam.label = '' end
	buttonParam.position = {positionXscale * -7.5, positionY, (2.75 * positionZscale) + positionZoffset2}
	buttonParam.width = 300 * buttonScale
	buttonParam.height = 300 * buttonScale
	selfIn.createButton(buttonParam)
	buttonParam.label = 'Use color'
	buttonParam.position = {positionXscale * -4, positionY, (2.75 * positionZscale) + positionZoffset2}
	buttonParam.width = 2700 * buttonScale
	buttonParam.height = 700 * buttonScale
	selfIn.createButton(buttonParam)

	if selfIn.name ~= 'backgammon_board' or Player[selfIn.getVar('playerNoteTaker')].admin then
		buttonParam.click_function = 'flipMoveTracker'
		if moveTracker then buttonParam.label = 'x' else buttonParam.label = '' end
		buttonParam.position = {positionXscale * -7.5, positionY, (4.25 * positionZscale) + positionZoffset2}
		buttonParam.width = 300 * buttonScale
		buttonParam.height = 300 * buttonScale
		selfIn.createButton(buttonParam)
		buttonParam.label = 'Move tracker'
		buttonParam.position = {positionXscale * -4, positionY, (4.25 * positionZscale) + positionZoffset2}
		buttonParam.width = 2700 * buttonScale
		buttonParam.height = 700 * buttonScale
		selfIn.createButton(buttonParam)
	end

	if not no_button_list['menu'] then
		buttonParam.click_function = 'flipSwapLF'
		if swapLF then buttonParam.label = 'x' else buttonParam.label = '' end
		buttonParam.position = {positionXscale * -7.5, positionY, (5.75 * positionZscale) + positionZoffset2}
		buttonParam.width = 300 * buttonScale
		buttonParam.height = 300 * buttonScale
		selfIn.createButton(buttonParam)
		buttonParam.label = 'Swap ' .. text.liberalLetter .. ' and ' .. text.fascistLetter
		buttonParam.position = {positionXscale * -4, positionY, (5.75 * positionZscale) + positionZoffset2}
		buttonParam.width = 2700 * buttonScale
		buttonParam.height = 700 * buttonScale
		selfIn.createButton(buttonParam)
	end

	if selfIn.name == 'Checker_Board' or selfIn.name == 'Go_Board' then
		buttonParam.click_function = 'flipColorMatch'
		if colorMatch then buttonParam.label = 'x' else buttonParam.label = '' end
		buttonParam.position = {positionXscale * -7.5, positionY, (7.25 * positionZscale) + positionZoffset2}
		buttonParam.width = 300 * buttonScale
		buttonParam.height = 300 * buttonScale
		selfIn.createButton(buttonParam)
		buttonParam.label = 'Color match'
		buttonParam.position = {positionXscale * -4, positionY, (7.25 * positionZscale) + positionZoffset2}
		buttonParam.width = 2700 * buttonScale
		buttonParam.height = 700 * buttonScale
		selfIn.createButton(buttonParam)
	elseif selfIn.name == 'backgammon_board' and Player[selfIn.getVar('playerNoteTaker')].admin then
		buttonParam.click_function = 'flipCooperative'
		if cooperative then buttonParam.label = 'x' else buttonParam.label = '' end
		buttonParam.position = {positionXscale * -7.5, positionY, (7.25 * positionZscale) + positionZoffset2}
		buttonParam.width = 300 * buttonScale
		buttonParam.height = 300 * buttonScale
		selfIn.createButton(buttonParam)
		buttonParam.label = 'Cooperative'
		buttonParam.position = {positionXscale * -4, positionY, (7.25 * positionZscale) + positionZoffset2}
		buttonParam.width = 2700 * buttonScale
		buttonParam.height = 700 * buttonScale
		selfIn.createButton(buttonParam)
	end

	buttonParam.click_function = 'shuffleDrawDeckButton'
	buttonParam.label = 'Shuffle'
	buttonParam.position = {positionXscale * 4, positionY, 1.25  * positionZscale + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'disableSecurityButton'
	buttonParam.label = 'Disable security'
	buttonParam.position = {positionXscale * 4, positionY, 2.75 * positionZscale + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'giveRoleCardsButton'
	buttonParam.label = 'Give role cards'
	buttonParam.position = {positionXscale * 4, positionY, 4.25 * positionZscale + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'forceVotePass'
	buttonParam.label = 'Vote Passed'
	buttonParam.position = {positionXscale * 4, positionY, 5.75 * positionZscale + positionZoffset2}
	selfIn.createButton(buttonParam)
end

function setupPlayer(clickedObject, playerIn)
	clickedObject.setVar('playerNoteTaker', playerIn)
	functionName = setupBoardGetFunction(playerIn) .. colorOffset[playerIn]
	startLuaCoroutine(clickedObject, 'spawnWaitDestructCoroutine')
end

function setupBoard(selfIn)
	if type(selfIn) == 'table' then
		selfIn = selfIn[1]
	end
	local playerNT = selfIn.getVar('playerNoteTaker')
	local imagename = setupBoardGetFunction(playerIn) .. colorOffset[playerNT]
	if no_button_list[functionName] then
		positionY = -0.1
	end
	if colorMatch then selfIn.setColorTint(stringColorToRGBExtra(playerNT)) end
	forceObjectToPlayer(selfIn, playerNT, {forward = giveForward, right = rightOffset[playerNT], up = 0, forceHeight = giveHeight}, {x = rotationZ, y = 180 - rotationZ, z = 0})
	selfIn.setLock(true)
	if selfIn.name == 'backgammon_board' then
		local screen = getObjectFromGUID(privateScreenGUID)
		if screen then
			forceObjectToPlayer(screen, playerNT, {forward = giveForward + 12.5, right = rightOffset[playerNT], up = 0, forceHeight = 0.9}, {x = 0, y = 180 - rotationZ, z = 0})
			screen.setLock(true)
			refreshNotes(selfIn)
			startLuaCoroutine(selfIn, 'spawnFogCoroutine')
		else
			spawnScreen(selfIn)
			return
		end
	end
	local fName = setupBoardGetFunction(playerNT)
	_G[fName](selfIn, colorOffset[playerNT])
end

function setupBoardGetFunction(playerIn)
	if playerIn == 'Orange' or playerIn == 'Yellow' or playerIn == 'Purple' or playerIn == 'Pink' then
		return 'initVertical'
	else
		return 'initHorizontal'
	end
end

function setupMe(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, playerColor)
	end
end

function setupWhite(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'White')
	end
end

function setupBrown(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Brown')
	end
end

function setupRed(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Red')
	end
end

function setupOrange(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Orange')
	end
end

function setupYellow(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Yellow')
	end
end

function setupGreen(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Green')
	end
end

function setupTeal(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Teal')
	end
end

function setupBlue(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Blue')
	end
end

function setupPurple(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Purple')
	end
end

function setupPink(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		setupPlayer(clickedObject, 'Pink')
	end
end

function flipUseNames(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		useNames = not useNames
		refreshNotes(clickedObject)
		menu(clickedObject)
	end
end

function flipUseColor(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		useColor = not useColor
		refreshNotes(clickedObject)
		menu(clickedObject)
	end
end

function flipSwapLF(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		swapLF = not swapLF
		menu(clickedObject)
	end
end

function flipColorMatch(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		colorMatch = not colorMatch
		menu(clickedObject)
	end
end

function flipCooperative(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		cooperative = not cooperative
		menu(clickedObject)
	end
end

function flipMoveTracker(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		moveTracker = not moveTracker
		menu(clickedObject)
	end
end

function shuffleDrawDeckButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if not Global.call('shuffleDrawDeck') then
			broadcastToColor('ERROR: Failed to shuffle draw deck.', playerColor, {1,0,0})
		end
	end
end

function disableSecurityButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		Global.call('disableSecurity')
	end
end

function giveRoleCardsButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		Global.call('giveRoleCards')
	end
end

function forceVotePass(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		Global.setVar('votePassed', true)
		Global.setVar('blockDraw', false)
	end
end

function initHorizontal(selfIn, offset)
	local buttonParam = {rotation = {0, 0, rotationZ}, width = 1800 * buttonScale, height = 700 * buttonScale, font_size = 300 * fontScale}

	if sharedHistory then
		buttonParam.function_owner = Global
	else
		buttonParam.function_owner = self
	end

	-- Players
	local color = offset + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * 4, positionY, (-2.25 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * 0, positionY, (-2.25 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * -4, positionY, (-2.25 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * -6, positionY, (-3.75 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * -6, positionY, (-5.25 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * -4, positionY, (-6.75 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * 0, positionY, (-6.75 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * 4, positionY, (-6.75 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * 6, positionY, (-5.25 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * 6, positionY, (-3.75 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	initCommon(selfIn)
end

function initVertical(selfIn, offset)
	local buttonParam = {rotation = {0, 0, rotationZ}, width = 1800 * buttonScale, height = 700 * buttonScale, font_size = 300 * fontScale}

	if sharedHistory then
		buttonParam.function_owner = Global
	else
		buttonParam.function_owner = self
	end

	-- Players
	local color = offset + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * 6, positionY, (-6.0 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * 6, positionY, (-4.5 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * 6, positionY, (-3.0 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * 2, positionY, (-2.25 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * -2, positionY, (-2.25 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * -6, positionY, (-3.0 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * -6, positionY, (-4.5 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * -6, positionY, (-6.0 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * -2, positionY, (-6.75 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	color = color + 1
	if color > 10 then color = color - 10 end
	buttonParam.click_function = MAIN_PLAYABLE_COLORS[color]
	buttonParam.label = MAIN_PLAYABLE_COLORS[color]
	buttonParam.position = {positionXscale * 2, positionY, (-6.75 * positionZscale) + positionZoffset1}
	buttonParam.color = stringColorToRGBExtra(MAIN_PLAYABLE_COLORS[color])
	selfIn.createButton(buttonParam)

	initCommon(selfIn)
end

function initCommon(selfIn)
	local buttonParam = {rotation = {0, 0, rotationZ}, font_size = 300 * fontScale}
	local bulletInfo = Global.getTable('bulletInfo')
	local text = Global.getTable('text')

	if sharedHistory then
		buttonParam.function_owner = Global
	else
		buttonParam.function_owner = self
	end

	-- Info
	if selfIn.name == 'backgammon_board' then
		local screen = getObjectFromGUID(privateScreenGUID)
		if screen then
			screen.setName('Private Notes')
		end
	end

	-- Settings
	buttonParam.click_function = 'menuButton'
	buttonParam.label = menu_unicode
	buttonParam.width = 600 * buttonScale
	buttonParam.height = 500 * buttonScale
	if selfIn.name == 'backgammon_board' then
		buttonParam.position = {positionXscale * 7.4, positionY, (-16.3 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * 7.6, positionY, (-7.5 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	-- Post/Retrieve
	if selfIn.name == 'backgammon_board' and cooperative then
		buttonParam.click_function = 'postButton'
		buttonParam.label = 'Post'
		buttonParam.width = 1500 * buttonScale
		buttonParam.position = {positionXscale * -6.25, positionY, (-16.3 * positionZscale) + positionZoffset2}
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'retrieveButton'
		buttonParam.label = 'Retrieve'
		buttonParam.position = {positionXscale * 5, positionY, (-16.3 * positionZscale) + positionZoffset2}
		selfIn.createButton(buttonParam)
	end

	-- Center
	buttonParam.click_function = 'autoButton'
	buttonParam.label = 'Auto Gov'
	buttonParam.height = 700 * buttonScale
	if Player[selfIn.getVar('playerNoteTaker')].admin or selfIn.name ~= 'backgammon_board' then
		buttonParam.width = 1800 * buttonScale
		buttonParam.position = {positionXscale * -2, positionY, (-5.25 * positionZscale) + positionZoffset1}
		selfIn.createButton(buttonParam)

		buttonParam.click_function = 'setPreviousPlacs'
		buttonParam.label = 'Move Prev'
		buttonParam.position = {positionXscale * 2, positionY, (-5.25 * positionZscale) + positionZoffset1}
		selfIn.createButton(buttonParam)
	else
		buttonParam.width = 3700 * buttonScale
		buttonParam.position = {positionXscale * 0, positionY, (-5.25 * positionZscale) + positionZoffset1}
		selfIn.createButton(buttonParam)
	end

	buttonParam.click_function = 'downvotedButton'
	buttonParam.label = 'Downvoted'
	buttonParam.width = 3700 * buttonScale
	buttonParam.position = {positionXscale * 0, positionY, (-3.75 * positionZscale) + positionZoffset1}
	selfIn.createButton(buttonParam)

	-- Left
	buttonParam.click_function = 'examinesButton'
	buttonParam.label = 'Ex Deck'
	buttonParam.width = 1500 * buttonScale
	buttonParam.height = 700 * buttonScale
	buttonParam.position = {positionXscale * -6.5, positionY, (-0.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'conflictButton'
	buttonParam.label = 'Conflict'
	buttonParam.position = {positionXscale * -6.5, positionY, (1.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'reshuffleButton'
	buttonParam.label = 'Reshuffle'
	buttonParam.position = {positionXscale * -6.5, positionY, (2.75 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'hZoneButton'
	buttonParam.label = string.sub(text.hitler, 1, 1) .. ' Zone'
	buttonParam.position = {positionXscale * -6.5, positionY, (4.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'topdeckButton'
	buttonParam.label = 'Topdeck'
	buttonParam.position = {positionXscale * -6.5, positionY, (5.75 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'revisedButton'
	buttonParam.label = 'Revised'
	buttonParam.position = {positionXscale * -6.5, positionY, (7.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	-- Right
	buttonParam.click_function = 'deleteLineButton'
	buttonParam.label = 'Delete Line'
	buttonParam.position = {positionXscale * 6.5, positionY, (-0.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'insertLineButton'
	buttonParam.label = 'Insert Line'
	buttonParam.position = {positionXscale * 6.5, positionY, (1.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'topButton'
	buttonParam.label = 'Top'
	buttonParam.position = {positionXscale * 6.5, positionY, (2.75 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'bottomButton'
	buttonParam.label = 'Bottom'
	buttonParam.position = {positionXscale * 6.5, positionY, (4.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'upButton'
	buttonParam.label = up_unicode
	buttonParam.width = 700 * buttonScale
	buttonParam.position = {positionXscale * 5.75, positionY, (5.75 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'rightButton'
	buttonParam.label = right_unicode
	buttonParam.position = {positionXscale * 7.25, positionY, (6.5 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'downButton'
	buttonParam.label = down_unicode
	buttonParam.position = {positionXscale * 5.75, positionY, (7.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'leftButton'
	buttonParam.label = left_unicode
	buttonParam.position = {positionXscale * 4.25, positionY, (6.5 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	-- Policy x3
	buttonParam.click_function = 'QQQ'
	buttonParam.label = '???'
	buttonParam.position = {positionXscale * 3.8, positionY, (2.75 * positionZscale) + positionZoffset2}
	buttonParam.width = 900 * buttonScale
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'FFF'
	buttonParam.label = text.fascistLetter .. text.fascistLetter .. text.fascistLetter
	if swapLF then
		buttonParam.position = {positionXscale * -3.8, positionY, (2.75 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * 1.9, positionY, (2.75 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'FFL'
	buttonParam.label = text.fascistLetter .. text.fascistLetter .. text.liberalLetter
	if swapLF then
		buttonParam.position = {positionXscale * -1.9, positionY, (2.75 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * 0.0, positionY, (2.75 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'FLL'
	buttonParam.label = text.fascistLetter .. text.liberalLetter .. text.liberalLetter
	if swapLF then
		buttonParam.position = {positionXscale * 0.0, positionY, (2.75 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * -1.9, positionY, (2.75 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'LLL'
	buttonParam.label = text.liberalLetter .. text.liberalLetter .. text.liberalLetter
	if swapLF then
		buttonParam.position = {positionXscale * 1.9, positionY, (2.75 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * -3.8, positionY, (2.75 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	-- Policy x2
	buttonParam.click_function = 'QQ'
	buttonParam.label = '??'
	buttonParam.position = {positionXscale * 2.85, positionY, (4.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'FF'
	buttonParam.label = text.fascistLetter .. text.fascistLetter
	if swapLF then
		buttonParam.position = {positionXscale * -2.85, positionY, (4.25 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * 0.95, positionY, (4.25 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	-- same if swapLF
	buttonParam.click_function = 'FL'
	buttonParam.label = text.fascistLetter .. text.liberalLetter
	buttonParam.position = {positionXscale * -0.95, positionY, (4.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'LL'
	buttonParam.label = text.liberalLetter .. text.liberalLetter
	if swapLF then
		buttonParam.position = {positionXscale * 0.95, positionY, (4.25 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * -2.85, positionY, (4.25 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	-- Policy final
	buttonParam.click_function = 'vetoButton'
	buttonParam.label = 'Veto'
	buttonParam.position = {positionXscale * 1.9, positionY, (5.75 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'F'
	buttonParam.label = text.fascistLetter
	if swapLF then
		buttonParam.position = {positionXscale * -1.9, positionY, (5.75 * positionZscale) + positionZoffset2}
	else
		buttonParam.position =  {positionXscale * 0.0, positionY, (5.75 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'L'
	buttonParam.label = text.liberalLetter
	if swapLF then
		buttonParam.position = {positionXscale * 0.0, positionY, (5.75 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * -1.9, positionY, (5.75 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	-- Power buttons
	buttonParam.click_function = 'investigate'
	buttonParam.label = 'Investigates'
	buttonParam.position = {positionXscale * -2.9, positionY, (-0.25 * positionZscale) + positionZoffset2}
	buttonParam.width = 1800 * buttonScale
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'givesTo'
	buttonParam.label = 'Gives to'
	buttonParam.position = {positionXscale * 0.5, positionY, (-0.25 * positionZscale) + positionZoffset2}
	buttonParam.width = 1400 * buttonScale
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'shoots'
	buttonParam.label = bulletInfo.action
	buttonParam.position = {positionXscale * 3.4, positionY, (-0.25 * positionZscale) + positionZoffset2}
	buttonParam.width = 1300 * buttonScale
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'liberal'
	buttonParam.label = text.liberalAbbr
	buttonParam.width = 1500 * buttonScale
	if swapLF then
		buttonParam.position = {positionXscale * 0.0, positionY, (1.25 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * -3.2, positionY, (1.25 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'fascist'
	buttonParam.label = text.fascistAbbr
	if swapLF then
		buttonParam.position = {positionXscale * -3.2, positionY, (1.25 * positionZscale) + positionZoffset2}
	else
		buttonParam.position = {positionXscale * 0.0, positionY, (1.25 * positionZscale) + positionZoffset2}
	end
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'noComment'
	buttonParam.label = 'Nothing'
	buttonParam.position = {positionXscale * 3.20, positionY, (1.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	-- Bottom
	buttonParam.click_function = 'exDiscardButton'
	buttonParam.label = 'Ex Discard'
	buttonParam.width = 1300 * buttonScale
	buttonParam.position = {positionXscale * -3.4, positionY, (7.25 * positionZscale) + positionZoffset2}
	buttonParam.font_size = 250
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'discardsButton'
	buttonParam.label = 'Discards'
	buttonParam.position = {positionXscale * -0.65, positionY, (7.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

	buttonParam.click_function = 'addsButton'
	buttonParam.label = 'Adds to\nDeck'
	buttonParam.position = {positionXscale * 2.1, positionY, (7.25 * positionZscale) + positionZoffset2}
	selfIn.createButton(buttonParam)

end

function spawnScreen(selfIn)
	local params = {
		type = 'Notecard',
		scale = {3.79999614, 3.79999614, 3.79999614},
		position = {-100, 100, -100},
		callback = 'spawnScreenCallback',
		callback_owner = selfIn,
		sound = false
	}
	spawnObject(params)
end

function spawnScreenCallback(objIn, paramsIn)
	privateScreenGUID = objIn.getGUID()
	refreshNotes(self)
	if playerNoteTaker and not (playerNoteTaker == '') then
		if forceMenu then
			forceMenu = false
			menu(self)
		else
			setupBoard(self)
		end
	else
		menu(self)
	end
end

function spawnFogCoroutine()
	local screen = getObjectFromGUID(privateScreenGUID)
	if screen then
		if privateFogGUID ~= hidden_zone_guids[playerNoteTaker] then
			destroyObjectByGUID(privateFogGUID)
		end
		local secretZone = getObjectFromGUID(hidden_zone_guids[playerNoteTaker])
		local params = {position = {-100, 100, -100}, sound = false}
		local fog
		if secretZone then
			fog = secretZone.clone(params) -- only way I know to set the color
		else
			params.type = 'FogOfWarTrigger'
			fog = spawnObject(params)
		end
		wait(5)
		fog.setPosition(screen.getPosition())
		fog.setRotation(screen.getRotation())
		fog.setScale({26.2, 3.5, 15.8})
		privateFogGUID = fog.getGUID()
	end

	return true
end

function postButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor then
		if nextPost == nil or nextPost < os.clock() then
			nextPost = os.clock() + 30
			Global.setTable('noteTakerNotes', noteTakerNotes)
			Global.setVar('noteTakerCurrLine', noteTakerCurrLine)
			local options = Global.getTable('options')
			if options.scriptedVoting then
				local notesString = noteTakerNotesString(19, false, true)
				Global.setVar('mainNotes', notesString)
				setNotes(Global.getVar('voteNotes') .. '\n\n' .. notesString)
			else
				local notesString = noteTakerNotesString(25, false, true)
				setNotes(notesString)
			end
		else
			broadcastToColor('You can only post once every 30 seconds.', playerNoteTaker, {1, 0, 0})
		end
	end
end

function retrieveButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor then
		noteTakerNotes = Global.getTable('noteTakerNotes')
		noteTakerCurrLine = Global.getVar('noteTakerCurrLine')
		if not noteTakerCurrLine or noteTakerCurrLine == 0 then
			noteTakerNotes = {}
			noteTakerCurrLine = 0
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function addNewLine()
	noteTakerCurrLine = noteTakerCurrLine + 1
	if noteTakerCurrLine > #noteTakerNotes then
		table.insert(noteTakerNotes, defaultLine())
	end
	editMode = true
end

function refreshNotes(selfIn)
	local tempNotes = noteTakerNotesString(maxLines, true, useColor)

	if selfIn and selfIn.name == 'backgammon_board' then
		tempNotes = string.gsub(tempNotes, stringColorToHex('White') .. ']', textColorReplace)
		local screen = getObjectFromGUID(privateScreenGUID)
		if screen then -- save the long version by not using noteTakerSetNotes
			screen.setDescription(tempNotes)
		end
	else
		noteTakerSetNotes(tempNotes)
	end
end

function buttonColor(clickedObject, playerColor, colorClicked)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		local bulletInfo = Global.getTable('bulletInfo')
		if noteTakerNotes[noteTakerCurrLine].color1 == '' or not editMode then
			noteTakerNotes[noteTakerCurrLine].color1 = colorClicked
			noteTakerNotes[noteTakerCurrLine].action = '>'
			prevPresColor = colorClicked
		else
			noteTakerNotes[noteTakerCurrLine].color2 = colorClicked
			prevChanColor = colorClicked
		end
		if (noteTakerNotes[noteTakerCurrLine].action == string.lower(bulletInfo.action) or noteTakerNotes[noteTakerCurrLine].action == 'gives pres to')
			 and noteTakerNotes[noteTakerCurrLine].color1 ~= '' and noteTakerNotes[noteTakerCurrLine].color2 ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function White(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'White')
end

function Brown(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Brown')
end

function Red(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Red')
end

function Orange(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Orange')
end

function Yellow(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Yellow')
end

function Green(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Green')
end

function Teal(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Teal')
end

function Blue(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Blue')
end

function Purple(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Purple')
end

function Pink(clickedObject, playerColor)
	buttonColor(clickedObject, playerColor, 'Pink')
end

-- Top
function autoButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		local tempObj = getObjectFromGUID(president_guid)
		local pres = closestPlayer(tempObj, MAIN_PLAYABLE_COLORS, 1000)
		tempObj = getObjectFromGUID(chancelor_guid)
		local chan = closestPlayer(tempObj, MAIN_PLAYABLE_COLORS, 1000)

		if pres then
			noteTakerNotes[noteTakerCurrLine].color1 = pres
			noteTakerNotes[noteTakerCurrLine].action = '>'
			prevPresColor = pres
		end
		if chan then
			noteTakerNotes[noteTakerCurrLine].color2 = chan
			noteTakerNotes[noteTakerCurrLine].action = '>'
			prevChanColor = chan
		end
		refreshNotes(clickedObject)
	end
end

function setPreviousPlacs(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if prevPresColor and prevChanColor then
			local tmpPres = getObjectFromGUID(prev_president_guid)
			if tmpPres then giveObjectToPlayer(tmpPres, prevPresColor, {forward = 11, right = 0, up = 0, forceHeight = 1.1}, NO_ROT, false, true) end
			local tmpChan = getObjectFromGUID(prev_chancelor_guid)
			if tmpChan then giveObjectToPlayer(tmpChan, prevChanColor, {forward = 11, right = 0, up = 0, forceHeight = 1.1}, NO_ROT, false, true) end
		end
	end
end

function downvotedButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		noteTakerNotes[noteTakerCurrLine].result = '[222222]Downvoted[-]'
		noteTakerNotes[noteTakerCurrLine].action = '>'
		noteTakerNotes[noteTakerCurrLine].claim3 = ''
		noteTakerNotes[noteTakerCurrLine].claim2 = ''
		noteTakerNotes[noteTakerCurrLine].claim1 = ''
		addNewLine()
		refreshNotes(clickedObject)
		incTracker()
	end
end

-- Left
function examinesButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'examines deck:' then
			noteTakerNotes[noteTakerCurrLine].action = '>'
		else
			noteTakerNotes[noteTakerCurrLine].action = 'examines deck:'
			noteTakerNotes[noteTakerCurrLine].color2 = ''
		end
		if noteTakerNotes[noteTakerCurrLine].result ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function conflictButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerConflict(noteTakerCurrLine) then
			noteTakerNotes[noteTakerCurrLine].conflict = ''
			noteTakerNotes[noteTakerCurrLine].claim2 = ''
		else
			noteTakerNotes[noteTakerCurrLine].conflict = '(Conflict)'
		end
		refreshNotes(clickedObject)
	end
end

function reshuffleButton(clickedObject, playerColor)
	resultOnly(clickedObject, playerColor, '*Reshuffle*')
end

function hZoneButton(clickedObject, playerColor)
	local text = Global.getTable('text')
	resultOnly(clickedObject, playerColor, '[FF0000]' .. text.hitler .. ' territory![-]')
end

function resultOnly(clickedObject, playerColor, text)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].result == text then
			noteTakerNotes[noteTakerCurrLine].result = ''
		else
			noteTakerNotes[noteTakerCurrLine].conflict = ''
			noteTakerNotes[noteTakerCurrLine].color1 = ''
			noteTakerNotes[noteTakerCurrLine].action = ''
			noteTakerNotes[noteTakerCurrLine].color2 = ''
			noteTakerNotes[noteTakerCurrLine].claim3 = ''
			noteTakerNotes[noteTakerCurrLine].claim2 = ''
			noteTakerNotes[noteTakerCurrLine].claim1 = ''
			noteTakerNotes[noteTakerCurrLine].result = text
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function topdeckButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'Topdeck:' then
			noteTakerNotes[noteTakerCurrLine].action = ''
		else
			noteTakerNotes[noteTakerCurrLine].conflict = ''
			noteTakerNotes[noteTakerCurrLine].color1 = ''
			noteTakerNotes[noteTakerCurrLine].action = 'Topdeck:'
			noteTakerNotes[noteTakerCurrLine].color2 = ''
			noteTakerNotes[noteTakerCurrLine].claim3 = ''
			noteTakerNotes[noteTakerCurrLine].claim2 = ''
			noteTakerNotes[noteTakerCurrLine].claim1 = ''
			if noteTakerNotes[noteTakerCurrLine].result ~= '' then
				addNewLine()
			end
		end
		refreshNotes(clickedObject)
	end
end

function revisedButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerConflict(noteTakerCurrLine) then
			if noteTakerNotes[noteTakerCurrLine].conflict == '(Rev Con)' then
				noteTakerNotes[noteTakerCurrLine].conflict = '(Conflict)'
			else
				noteTakerNotes[noteTakerCurrLine].conflict = '(Rev Con)'
			end
		elseif noteTakerNotes[noteTakerCurrLine].conflict == '(Rev)' then
			noteTakerNotes[noteTakerCurrLine].conflict = ''
		else
			noteTakerNotes[noteTakerCurrLine].conflict = '(Rev)'
		end
		refreshNotes(clickedObject)
	end
end

-- Right
function deleteLineButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerCurrLine == #noteTakerNotes then
			table.remove(noteTakerNotes, noteTakerCurrLine)
			noteTakerCurrLine = noteTakerCurrLine - 1
			addNewLine()
		else
			table.remove(noteTakerNotes, noteTakerCurrLine)
		end
		refreshNotes(clickedObject)
	end
end

function insertLineButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		table.insert(noteTakerNotes, noteTakerCurrLine, defaultLine())
		refreshNotes(clickedObject)
	end
end

function topButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		noteTakerCurrLine = 1
		refreshNotes(clickedObject)
		editMode = true
	end
end

function bottomButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		noteTakerCurrLine = #noteTakerNotes
		refreshNotes(clickedObject)
		editMode = true
	end
end

function upButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerCurrLine - 1 > 0 then
			noteTakerCurrLine = noteTakerCurrLine - 1
		end
		editMode = true
		refreshNotes(clickedObject)
		if noteTakerNotes[noteTakerCurrLine].color1 ~= '' then
			prevPresColor = noteTakerNotes[noteTakerCurrLine].color1
		end
		if noteTakerNotes[noteTakerCurrLine].color2 ~= '' then
			prevChanColor = noteTakerNotes[noteTakerCurrLine].color2
		end
	end
end

function downButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		addNewLine()
		editMode = true
		refreshNotes(clickedObject)
		if noteTakerNotes[noteTakerCurrLine].color1 ~= '' then
			prevPresColor = noteTakerNotes[noteTakerCurrLine].color1
		end
		if noteTakerNotes[noteTakerCurrLine].color2 ~= '' then
			prevChanColor = noteTakerNotes[noteTakerCurrLine].color2
		end
	end
end

function rightButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		editMode = true
		refreshNotes(clickedObject)
	end
end

function leftButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		editMode = false
		refreshNotes(clickedObject)
	end
end

-- Center
function investigate(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'inspects' then
			noteTakerNotes[noteTakerCurrLine].action = '>'
		else
			noteTakerNotes[noteTakerCurrLine].action = 'inspects'
		end
		if noteTakerNotes[noteTakerCurrLine].color1 ~= ''
			and noteTakerNotes[noteTakerCurrLine].color2 ~= ''
			and noteTakerNotes[noteTakerCurrLine].result ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function givesTo(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'gives pres to' then
			noteTakerNotes[noteTakerCurrLine].action = '>'
		else
			noteTakerNotes[noteTakerCurrLine].action = 'gives pres to'
		end
		if noteTakerNotes[noteTakerCurrLine].color1 ~= ''
			and noteTakerNotes[noteTakerCurrLine].color2 ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function shoots(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		local bulletInfo = Global.getTable('bulletInfo')
		if noteTakerNotes[noteTakerCurrLine].action == string.lower(bulletInfo.action) then
			noteTakerNotes[noteTakerCurrLine].action = '>'
		else
			noteTakerNotes[noteTakerCurrLine].action = string.lower(bulletInfo.action)
		end
		if noteTakerNotes[noteTakerCurrLine].color1 ~= ''
			and noteTakerNotes[noteTakerCurrLine].color2 ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function liberal(clickedObject, playerColor)
	local text = Global.getTable('text')
	resultText(clickedObject, playerColor, 'claims [0080F8]' .. text.liberalAbbr .. '[-]')
end

function fascist(clickedObject, playerColor)
	local text = Global.getTable('text')
	resultText(clickedObject, playerColor, 'claims [FF0000]' .. text.fascistAbbr .. '[-]')
end

function noComment(clickedObject, playerColor)
	resultText(clickedObject, playerColor, 'says [i]Nothing[/i]')
end

function resultText(clickedObject, playerColor, text)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].result == text then
			noteTakerNotes[noteTakerCurrLine].result = ''
		else
			noteTakerNotes[noteTakerCurrLine].result = text
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function LLL(clickedObject, playerColor)
	local text = Global.getTable('text')
	XXX(clickedObject, playerColor, '[0080F8]' .. text.liberalLetter .. text.liberalLetter .. text.liberalLetter .. '[-]')
end

function FLL(clickedObject, playerColor)
	local text = Global.getTable('text')
	XXX(clickedObject, playerColor, '[FF0000]' .. text.fascistLetter .. '[-][0080F8]' .. text.liberalLetter .. text.liberalLetter .. '[-]')
end

function FFL(clickedObject, playerColor)
	local text = Global.getTable('text')
	XXX(clickedObject, playerColor, '[FF0000]' .. text.fascistLetter .. text.fascistLetter .. '[-][0080F8]' .. text.liberalLetter .. '[-]')
end

function FFF(clickedObject, playerColor)
	local text = Global.getTable('text')
	XXX(clickedObject, playerColor, '[FF0000]' .. text.fascistLetter .. text.fascistLetter .. text.fascistLetter .. '[-]')
end

function QQQ(clickedObject, playerColor)
	XXX(clickedObject, playerColor, '???')
end

function XXX(clickedObject, playerColor, text)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'examines deck:' then
			if noteTakerNotes[noteTakerCurrLine].result == text then
				noteTakerNotes[noteTakerCurrLine].result = ''
			else
				noteTakerNotes[noteTakerCurrLine].result = text
				addNewLine()
			end
		else
			if noteTakerNotes[noteTakerCurrLine].claim3 == text then
				noteTakerNotes[noteTakerCurrLine].claim3 = ''
			else
				noteTakerNotes[noteTakerCurrLine].claim3 = text
				if noteTakerNotes[noteTakerCurrLine].claim1 ~= ''
						and noteTakerNotes[noteTakerCurrLine].result ~= ''
						and noteTakerCurrLine == #noteTakerNotes then
					addNewLine()
				end
			end
		end
		refreshNotes(clickedObject)
	end
end

function LL(clickedObject, playerColor)
	local text = Global.getTable('text')
	XX(clickedObject, playerColor, '[0080F8]' .. text.liberalLetter .. text.liberalLetter .. '[-]')
end

function FL(clickedObject, playerColor)
	local text = Global.getTable('text')
	XX(clickedObject, playerColor, '[FF0000]' .. text.fascistLetter .. '[-][0080F8]' .. text.liberalLetter .. '[-]')
end

function FF(clickedObject, playerColor)
	local text = Global.getTable('text')
	XX(clickedObject, playerColor, '[FF0000]' .. text.fascistLetter .. text.fascistLetter .. '[-]')
end

function QQ(clickedObject, playerColor)
	XX(clickedObject, playerColor, '??')
end

function XX(clickedObject, playerColor, text)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if not editMode or (noteTakerNotes[noteTakerCurrLine].claim2 == ''
			and noteTakerConflict(noteTakerCurrLine)) then
			if noteTakerNotes[noteTakerCurrLine].claim2 == text then
				noteTakerNotes[noteTakerCurrLine].claim2 = ''
			else
				noteTakerNotes[noteTakerCurrLine].claim2 = text
			end
		else
			if noteTakerNotes[noteTakerCurrLine].claim1 == text then
				noteTakerNotes[noteTakerCurrLine].claim1 = ''
			else
				noteTakerNotes[noteTakerCurrLine].claim1 = text
			end
		end
		refreshNotes(clickedObject)
	end
end

function L(clickedObject, playerColor)
	local text = Global.getTable('text')
	X(clickedObject, playerColor, '[0080F8]' .. text.liberalLetter .. '[-]')
end

function F(clickedObject, playerColor)
	local text = Global.getTable('text')
	X(clickedObject, playerColor, '[FF0000]' .. text.fascistLetter .. '[-]')
end

function X(clickedObject, playerColor, text)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].result == text then
			noteTakerNotes[noteTakerCurrLine].result = ''
		else
			noteTakerNotes[noteTakerCurrLine].result = text
			if noteTakerCurrLine == #noteTakerNotes and
				((noteTakerNotes[noteTakerCurrLine].claim1 ~= ''
				  and noteTakerNotes[noteTakerCurrLine].claim3 ~= '')
				 or noteTakerNotes[noteTakerCurrLine].action == 'Topdeck:'
				 or noteTakerNotes[noteTakerCurrLine].action == 'examines deck:') then
				addNewLine()
			end
			resetTracker()
		end
		refreshNotes(clickedObject)
	end
end

function vetoButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		noteTakerNotes[noteTakerCurrLine].result = 'Veto!'
		addNewLine()
		refreshNotes(clickedObject)
		incTracker()
	end
end

--Bottom
function exDiscardButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'examines discard:' then
			noteTakerNotes[noteTakerCurrLine].action = '>'
		else
			noteTakerNotes[noteTakerCurrLine].action = 'examines discard:'
			noteTakerNotes[noteTakerCurrLine].color2 = ''
		end
		if noteTakerNotes[noteTakerCurrLine].result ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function discardsButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'discards:' then
			noteTakerNotes[noteTakerCurrLine].action = '>'
		else
			noteTakerNotes[noteTakerCurrLine].action = 'discards:'
			noteTakerNotes[noteTakerCurrLine].color2 = ''
		end
		if noteTakerNotes[noteTakerCurrLine].result ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function addsButton(clickedObject, playerColor)
	if clickedObject.getVar('playerNoteTaker') == playerColor or Player[playerColor].admin then
		if noteTakerNotes[noteTakerCurrLine].action == 'adds to deck:' then
			noteTakerNotes[noteTakerCurrLine].action = '>'
		else
			noteTakerNotes[noteTakerCurrLine].action = 'adds to deck:'
			noteTakerNotes[noteTakerCurrLine].color2 = ''
		end
		if noteTakerNotes[noteTakerCurrLine].result ~= '' then
			addNewLine()
		end
		refreshNotes(clickedObject)
	end
end

function incTracker()
	local tracker = getObjectFromGUID(election_tracker_guid)
	if moveTracker and tracker then
		tracker.translate({electionTrackerMoveX, 0, 0})
	end
end

function resetTracker()
	local tracker = getObjectFromGUID(election_tracker_guid)
	if moveTracker and tracker then
		tracker.setPositionSmooth(electionTrackerOrgPos)
		tracker.setRotationSmooth({0, 315, 0})
	end
end

function defaultLine()
	return {conflict = '', color1 = '', action = '', color2 = '', claim3 = '', claim2 = '', claim1 = '', result = ''}
end

function noteTakerNotesString(maxLinesIn, showArrow, useColorIn)
	local stringOut = ''
	local startLine = 1
	local lastLine = #noteTakerNotes

	if maxLinesIn < #noteTakerNotes then
		startLine = #noteTakerNotes - maxLinesIn + 1
	end
	if startLine > noteTakerCurrLine then
		startLine = noteTakerCurrLine
		lastLine = startLine + maxLinesIn - 1
		if lastLine > #noteTakerNotes then
			lastLine = #noteTakerNotes
		end
	end

	for i = startLine, lastLine, 1 do
		if noteTakerCurrLine == i and showArrow then
			if editMode then
				stringOut = stringOut .. right_unicode .. ' '
			else
				stringOut = stringOut .. left_unicode .. ' '
			end
		end
		stringOut = stringOut .. noteTakerNotesLine(i, useColorIn)
	end

	if not useColorIn then
		stringOut = string.gsub(stringOut, '0080F8]', textColorReplace) -- Liberal color
		stringOut = string.gsub(stringOut, 'FF0000]', textColorReplace) -- Fascist color
		stringOut = string.gsub(stringOut, '222222]', textColorReplace) -- Downvote color
	end

	return stringOut
end

function noteTakerNotesLine(lineIn, useColorIn)
	local bulletInfo = Global.getTable('bulletInfo')
	local stringOut = ''

	if noteTakerNotes[lineIn].conflict ~= '' then
		stringOut = stringOut .. noteTakerNotes[lineIn].conflict .. ' '
	end
	if noteTakerNotes[lineIn].color1 ~= '' then
		local text = noteTakerNotes[lineIn].color1
		if useNames then
			local playerObj = nil
			if greyPlayer(noteTakerNotes[lineIn].color1) then
				playerObj = getPlayerObj(noteTakerNotes[lineIn].color1)
			else
				playerObj = Player[noteTakerNotes[lineIn].color1]
			end
			if playerObj then	text = string.sub(playerObj.steam_name, 1, 7) end
		end
		if useColorIn then
			text = '[' .. stringColorToHex(noteTakerNotes[lineIn].color1) .. ']' .. text .. '[-]'
		end
		stringOut = stringOut .. '[i]' .. text .. '[/i]' .. ' '
	end
	if noteTakerNotes[lineIn].action ~= '' then
		stringOut = stringOut .. noteTakerNotes[lineIn].action .. ' '
	end
	if noteTakerNotes[lineIn].color2 ~= '' then
		local text = noteTakerNotes[lineIn].color2
		if useNames then
			local playerObj = nil
			if greyPlayer(noteTakerNotes[lineIn].color2) then
				playerObj = getPlayerObj(noteTakerNotes[lineIn].color2)
			else
				playerObj = Player[noteTakerNotes[lineIn].color2]
			end
			if playerObj then	text = string.sub(playerObj.steam_name, 1, 7) end
		end
		if useColorIn then
			text = '[' .. stringColorToHex(noteTakerNotes[lineIn].color2) .. ']' .. text .. '[-]'
		end
		stringOut = stringOut .. '[i]' .. text .. '[/i]'
		if noteTakerNotes[lineIn].action ~= 'gives pres to'
			and noteTakerNotes[lineIn].action ~= string.lower(bulletInfo.action) then
			stringOut = stringOut .. ': '
		elseif noteTakerNotes[lineIn].claim3 ~= ''
				or noteTakerNotes[lineIn].claim2 ~= ''
				or noteTakerNotes[lineIn].claim1 ~= ''
				or noteTakerNotes[lineIn].result ~= '' then
			stringOut = stringOut .. ' '
		end
	end
	if noteTakerNotes[lineIn].claim3 ~= '' then
		stringOut = stringOut .. noteTakerNotes[lineIn].claim3 .. ' > '
	end
	if noteTakerNotes[lineIn].claim2 ~= '' then
		stringOut = stringOut .. noteTakerNotes[lineIn].claim2 .. ' > '
	end
	if noteTakerNotes[lineIn].claim1 ~= '' then
		stringOut = stringOut .. noteTakerNotes[lineIn].claim1 .. ' > '
	end
	if noteTakerNotes[lineIn].result ~= '' then
		stringOut = stringOut .. noteTakerNotes[lineIn].result
	end
	stringOut = stringOut .. '\n'

	return stringOut
end

function noteTakerConflict(currLineIn)
	if noteTakerNotes[currLineIn].conflict == '(Conflict)' then
		return true
	elseif noteTakerNotes[currLineIn].conflict == '(Rev Con)' then
		return true
	end

	return false
end

function notateInfo(color1In, actionIn, color2In, resultIn, updateLaterIn)
	local lineSave = noteTakerCurrLine
	noteTakerCurrLine = #noteTakerNotes
	if not noteTakerBlankLine(noteTakerCurrLine) then
		addNewLine()
		noteTakerCurrLine = #noteTakerNotes
	end
	noteTakerNotes[noteTakerCurrLine].color1 = color1In
	noteTakerNotes[noteTakerCurrLine].action = actionIn
	noteTakerNotes[noteTakerCurrLine].color2 = color2In
	noteTakerNotes[noteTakerCurrLine].result = resultIn
	if updateLaterIn then
		notate.line = noteTakerCurrLine
		notate.action = actionIn
	end
	noteTakerCurrLine = lineSave
	refreshNotes(nil)
end

function noteTakerBlankLine(currLineIn)
	if noteTakerNotes[noteTakerCurrLine].conflict == ''
		and noteTakerNotes[noteTakerCurrLine].color1 == ''
		and noteTakerNotes[noteTakerCurrLine].action == ''
		and noteTakerNotes[noteTakerCurrLine].color2 == ''
		and noteTakerNotes[noteTakerCurrLine].claim3 == ''
		and noteTakerNotes[noteTakerCurrLine].claim2 == ''
		and noteTakerNotes[noteTakerCurrLine].claim1 == ''
		and noteTakerNotes[noteTakerCurrLine].result == '' then
			return true
	end

	return false
end

function noteTakerSetNotes(stringIn)
	local options = Global.getTable('options')
	if options.scriptedVoting then
		Global.setVar('mainNotes', stringIn)
		setNotes(Global.getVar('voteNotes') .. '\n\n' .. stringIn)
	else
		setNotes(stringIn)
	end
end

function newNoteTakerLuaScript(playerNoteTakerIn, useColorIn, cooperativeIn, colorMatchIn, useNamesIn, swapLFIn, moveTrackerIn)
	local mainScript = Global.getLuaScript()
	local cutHerePos = string.find(mainScript, '--CUT HERE')

	return 'useColor = ' .. useColorIn .. '\r\n' ..
	'cooperative = ' .. cooperativeIn .. '\r\n' ..
	'colorMatch = ' .. colorMatchIn .. '\r\n' ..
	'useNames = ' .. useNamesIn .. '\r\n' ..
	'playerNoteTaker = \'' .. playerNoteTakerIn .. '\'\r\n' ..
	'privateFogGUID = nil\r\n' ..
	'privateScreenGUID = nil\r\n' ..
	'swapLF = ' .. swapLFIn .. '\r\n' ..
	'moveTracker = ' .. moveTrackerIn .. '\r\n' ..
	'prevPresColor = nil\r\n' ..
	'prevChanColor = nil\r\n' ..
	'nextPost = nil\r\n' ..
	'forceMenu = nil\r\n' ..
	'lastGUID = nil\r\n' ..
	'\r\n' ..
	'function onLoad(saveString)\r\n' ..
	'	noteTakerOnLoad(saveString)\r\n' ..
	'end\r\n' ..
	'\r\n' ..
	'function onSave()\r\n' ..
	'	return notetakerOnSave()\r\n' ..
	'end\r\n' ..
	'\r\n' ..
	'function onDestroy()\r\n' ..
	'	notetakerOnDestroy()\r\n' ..
	'end\r\n' ..
	string.sub(mainScript, cutHerePos, string.len(mainScript))
end

function respawnNoteTakerLuaScript()
	local mainScript = self.getLuaScript()
	local cutHerePos = string.find(mainScript, '--CUT HERE')

	return 'useColor = ' .. tostring(useColor) .. '\r\n' ..
	'cooperative = ' .. tostring(cooperative) .. '\r\n' ..
	'colorMatch = ' .. tostring(colorMatch) .. '\r\n' ..
	'useNames = ' .. tostring(useNames) .. '\r\n' ..
	'playerNoteTaker = ' .. easyQuotes(playerNoteTaker) .. '\r\n' ..
	'privateFogGUID = ' .. easyQuotes(privateFogGUID) .. '\r\n' ..
	'privateScreenGUID = ' .. easyQuotes(privateScreenGUID) .. '\r\n' ..
	'swapLF = ' .. tostring(swapLF) .. '\r\n' ..
	'moveTracker = ' .. tostring(moveTracker) .. '\r\n' ..
	'prevPresColor = ' .. easyQuotes(prevPresColor) .. '\r\n' ..
	'prevChanColor = ' .. easyQuotes(prevChanColor) .. '\r\n' ..
	'nextPost = ' .. tostring(nextPost) .. '\r\n' ..
	'forceMenu = ' ..  tostring(forceMenu) .. '\r\n' ..
	'lastGUID = ' .. easyQuotes(self.getGUID()) .. '\r\n' ..
	'\r\n' ..
	'function onLoad(saveString)\r\n' ..
	'	noteTakerOnLoad(saveString)\r\n' ..
	'end\r\n' ..
	'\r\n' ..
	'function onSave()\r\n' ..
	'	return notetakerOnSave()\r\n' ..
	'end\r\n' ..
	'\r\n' ..
	'function onDestroy()\r\n' ..
	'	notetakerOnDestroy()\r\n' ..
	'end\r\n' ..
	string.sub(mainScript, cutHerePos, string.len(mainScript))
end

function easyQuotes(stringIn)
	if stringIn then
		return string.char(39) .. stringIn .. string.char(39)
	else
		return 'nil'
	end
end
